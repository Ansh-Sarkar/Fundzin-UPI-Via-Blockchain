from brownie import accounts, SimpleStorage


def deploy_simple_storage():

    # demo accounts generated by Ganache
    # accounts = [
    #     '0xB85Aa1D0Fb3a7234c1E3f3607eF196946AA547d4',
    #     '0x439C78F7b64D50463c1E4Fda4d72E0324f08c583',
    #     '0x6F5De871898cF673848CB23A5a70d2f5d490F266',
    #     '0x87c1e7Ed6ADb64E55E670bb25B69101c38437368',
    #     '0x0D745F2297b7BCB232DE54e5B4D5dBBf6D14fe49',
    #     '0xF5207eCd2fC52E5745B68d2f99BeDE64C390Eac3',
    #     '0xf19dA64C735869E46cEccf59f89ebeE50c346dB7',
    #     '0x5b130a03d1769DE1a8f156fAf27E2970DDCCDF49',
    #     '0x8c2ee51188d1c21A96F7e8f083F372A3db2d76d5',
    #     '0x633679bBf093B854dBD18268Ee078B3bB9B3f850'
    # ]

    # load an account to carry out the transactions on the blockchain
    account = accounts.load("polygonfellowship2022@gmail.com.com")
    print(account)

    # deploy an instance of the SimpleStorage contract
    simple_storage = SimpleStorage.deploy(
        "Ansh Sarkar",
        "IHDCNNUMBER",
        "IHDC",
        "238423719",
        "anshsarkar18@ihdc.ok",
        2500,
        {"from": account},
    )
    print(simple_storage.getOwner())

    # liveContract = Contract.from_explorer("<contract-address>")
    # print(liveContract)

    # adding a new milestone
    newMilestoneCreationTransaction1 = simple_storage.addMilestone(
        "Semester 1", 1000, {"from": account}
    )
    # checking milestone count
    print("Milestones Count : " + str(simple_storage.getNumberOfMilestones()))
    # checking transaction events
    print(newMilestoneCreationTransaction1.events)

    # adding another milestone
    newMilestoneCreationTransaction2 = simple_storage.addMilestone(
        "Semester 2", 1500, {"from": account}
    )
    # checking milestone count
    print("Milestones Count : " + str(simple_storage.getNumberOfMilestones()))
    # checking transaction events
    print(newMilestoneCreationTransaction2.events)

    # checking if account 1 is initially a donor
    print(simple_storage.isDonor(accounts[1]))
    # creating new donation from account 1
    txn = simple_storage.newDonation(accounts[1], 1200, {"from": account})
    # checking transaction events
    print(txn.events)
    # creating new donation from account 2
    txn = simple_storage.newDonation(accounts[2], 1200, {"from": account})
    # checking transaction events
    print(txn.events)
    # creating a new donation from account 3
    txn = simple_storage.newDonation(accounts[3], 1200, {"from": account})
    # checking transaction events
    print(txn.events)
    # creating a new donation from account 4
    txn = simple_storage.newDonation(accounts[4], 1200, {"from": account})
    # checking transaction events
    print(txn.events)
    # checking total fundraiser amount raised
    print(simple_storage.getFundraiserAmountRaised())
    # printing all the account
    print(accounts)

    # casting vote from account 4
    txn = simple_storage.castVote(accounts[4], {"from": account})
    # checking transaction events
    print(txn.events)
    # casting vote from account 3
    txn = simple_storage.castVote(accounts[3], {"from": account})
    # checking transaction events
    print(txn.events)

    # activate voting for current milestone
    txn = simple_storage.activateVotingForCurrentMilestone({"from": account})
    # check transaction events
    print(txn.events)
    # cast vote from account 4
    txn = simple_storage.castVote(accounts[4], {"from": account})
    # check transaction events
    print(txn.events)

    # cast vote from account 3
    txn = simple_storage.castVote(accounts[3], {"from": account})
    # check transaction events
    print(txn.events)
    # check number of donors
    print("Number of Donors : " + str(simple_storage.getNumberOfDonors()))
    # check number of votes for the current milestone
    print("Number of Votes : " + str(simple_storage.votesCastForCurrentMilestone()))
    # get the current milestone number
    print("Current Milestone : " + str(simple_storage.currentMilestoneNumber()))

    # cast vote from account 2
    txn = simple_storage.castVote(accounts[3], {"from": account})
    # check transaction events
    print(txn.events)
    # check number of donors
    print("Number of Donors : " + str(simple_storage.getNumberOfDonors()))
    # check number of votes for the current milestone
    print("Number of Votes : " + str(simple_storage.votesCastForCurrentMilestone()))
    # get the current milestone number
    print("Current Milestone : " + str(simple_storage.currentMilestoneNumber()))

    # cast vote from account 2
    txn = simple_storage.castVote(accounts[2], {"from": account})
    # check transaction events
    print(txn.events)
    # check number of donors
    print("Number of Donors : " + str(simple_storage.getNumberOfDonors()))
    # check number of votes for the current milestone
    print("Number of Votes : " + str(simple_storage.votesCastForCurrentMilestone()))
    # get the current milestone number
    print("Current Milestone : " + str(simple_storage.currentMilestoneNumber()))

    # activate voting for current milestone
    txn = simple_storage.activateVotingForCurrentMilestone({"from": account})

    # casting vote from account 3
    txn = simple_storage.castVote(accounts[3], {"from": account})
    # checking transaction events
    print(txn.events)
    # check number of donors
    print("Number of Donors : " + str(simple_storage.getNumberOfDonors()))
    # check number of votes for the current milestone
    print("Number of Votes : " + str(simple_storage.votesCastForCurrentMilestone()))
    # get the current milestone number
    print("Current Milestone : " + str(simple_storage.currentMilestoneNumber()))

    # casting vote from account 2
    txn = simple_storage.castVote(accounts[2], {"from": account})
    # checking transaction events
    print(txn.events)
    # check number of donors
    print("Number of Donors : " + str(simple_storage.getNumberOfDonors()))
    # print("Number of Votes : " + str(simple_storage.votesCastForCurrentMilestone()))
    # get the current milestone number
    print("Current Milestone : " + str(simple_storage.currentMilestoneNumber()))

    # checking whether the fundraiser is completed or not
    print(simple_storage.isFundraiserCompleted())


def main():
    deploy_simple_storage()
